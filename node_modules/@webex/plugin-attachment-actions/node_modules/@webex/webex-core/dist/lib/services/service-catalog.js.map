{"version":3,"sources":["service-catalog.js"],"names":["ServiceCatalog","AmpState","extend","namespace","props","serviceGroups","discovery","preauth","signin","postauth","status","ready","collecting","allowedDomains","_getUrl","name","serviceGroup","serviceUrls","find","serviceUrl","_listServiceUrls","_loadServiceUrls","services","existingService","forEach","service","push","_unloadServiceUrls","splice","indexOf","clean","length","findClusterId","url","incomingUrlObj","Url","parse","clusterId","serviceUrlObj","key","defaultUrl","hostname","hosts","id","host","findServiceFromClusterId","priorityHost","identifiedServiceUrl","get","undefined","findServiceUrlFromUrl","findAllowedDomain","urlObj","allowedDomain","includes","getAllowedDomains","list","output","markFailedUrl","noPriorityHosts","removeHost","setAllowedDomains","updateServiceUrls","serviceHostmap","currentServiceUrls","unusedUrls","filter","every","item","serviceObj","ServiceUrl","trigger","waitForCatalog","timeout","resolve","reject","timeoutTimer","setTimeout","Error","once","clearTimeout"],"mappings":"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","file":"service-catalog.js","sourcesContent":["import Url from 'url';\n\nimport AmpState from 'ampersand-state';\n\nimport ServiceUrl from './service-url';\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst ServiceCatalog = AmpState.extend({\n  namespace: 'ServiceCatalog',\n\n  props: {\n    serviceGroups: ['object', true, (() => ({\n      discovery: [],\n      preauth: [],\n      signin: [],\n      postauth: []\n    }))],\n    status: ['object', true, (() => ({\n      discovery: {\n        ready: false,\n        collecting: false\n      },\n      preauth: {\n        ready: false,\n        collecting: false\n      },\n      postauth: {\n        ready: false,\n        collecting: false\n      },\n      signin: {\n        ready: false,\n        collecting: false\n      }\n    }))],\n    allowedDomains: ['array', false, (() => [])]\n  },\n\n  /**\n   * @private\n   * Search the service url array to locate a `ServiceUrl`\n   * class object based on its name.\n   * @param {string} name\n   * @param {string} [serviceGroup]\n   * @returns {ServiceUrl}\n   */\n  _getUrl(name, serviceGroup) {\n    const serviceUrls = (typeof serviceGroup === 'string') ?\n      this.serviceGroups[serviceGroup] || [] :\n      [\n        ...this.serviceGroups.postauth,\n        ...this.serviceGroups.signin,\n        ...this.serviceGroups.preauth,\n        ...this.serviceGroups.discovery\n      ];\n\n    return serviceUrls.find((serviceUrl) => serviceUrl.name === name);\n  },\n\n  /**\n   * @private\n   * Generate an array of `ServiceUrl`s that is organized from highest auth\n   * level to lowest auth level.\n   * @returns {Array<ServiceUrl>} - array of `ServiceUrl`s\n   */\n  _listServiceUrls() {\n    return [\n      ...this.serviceGroups.postauth,\n      ...this.serviceGroups.signin,\n      ...this.serviceGroups.preauth,\n      ...this.serviceGroups.discovery\n    ];\n  },\n\n  /**\n   * @private\n   * Safely load one or more `ServiceUrl`s into this `Services` instance.\n   * @param {string} serviceGroup\n   * @param  {Array<ServiceUrl>} services\n   * @returns {Services}\n   */\n  _loadServiceUrls(serviceGroup, services) {\n    // declare namespaces outside of loop\n    let existingService;\n\n    services.forEach((service) => {\n      existingService = this._getUrl(service.name, serviceGroup);\n\n      if (!existingService) {\n        this.serviceGroups[serviceGroup].push(service);\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * @private\n   * Safely unload one or more `ServiceUrl`s into this `Services` instance\n   * @param {string} serviceGroup\n   * @param  {Array<ServiceUrl>} services\n   * @returns {Services}\n   */\n  _unloadServiceUrls(serviceGroup, services) {\n    // declare namespaces outside of loop\n    let existingService;\n\n    services.forEach((service) => {\n      existingService = this._getUrl(service.name, serviceGroup);\n\n      if (existingService) {\n        this.serviceGroups[serviceGroup].splice(\n          this.serviceGroups[serviceGroup].indexOf(existingService), 1\n        );\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Clear all collected catalog data and reset catalog status.\n   *\n   * @returns {void}\n   */\n  clean() {\n    this.serviceGroups.preauth.length = 0;\n    this.serviceGroups.signin.length = 0;\n    this.serviceGroups.postauth.length = 0;\n    this.status.preauth = {ready: false};\n    this.status.signin = {ready: false};\n    this.status.postauth = {ready: false};\n  },\n\n  /**\n   * Search over all service groups to find a cluster id based\n   * on a given url.\n   * @param {string} url - Must be parsable by `Url`\n   * @returns {string} - ClusterId of a given url\n   */\n  findClusterId(url) {\n    const incomingUrlObj = Url.parse(url);\n    let clusterId;\n    let serviceUrlObj;\n\n    for (const key of Object.keys(this.serviceGroups)) {\n      for (const service of this.serviceGroups[key]) {\n        serviceUrlObj = Url.parse(service.defaultUrl);\n\n        if (serviceUrlObj.hostname === incomingUrlObj.hostname &&\n          service.hosts.length > 0) {\n          clusterId = service.hosts[0].id;\n          break;\n        }\n\n        for (const host of service.hosts) {\n          if (incomingUrlObj.hostname === host.host && host.id) {\n            clusterId = host.id;\n            break;\n          }\n        }\n\n        if (clusterId) {\n          break;\n        }\n      }\n    }\n\n    return clusterId;\n  },\n\n  /**\n   * Search over all service groups and return a service value from a provided\n   * clusterId. Currently, this method will return either a service name, or a\n   * service url depending on the `value` parameter. If the `value` parameter\n   * is set to `name`, it will return a service name to be utilized within the\n   * Services plugin methods.\n   * @param {object} params\n   * @param {string} params.clusterId - clusterId of found service\n   * @param {boolean} [params.priorityHost = true] - returns priority host url if true\n   * @param {string} [params.serviceGroup] - specify service group\n   * @returns {object} service\n   * @returns {string} service.name\n   * @returns {string} service.url\n   */\n  findServiceFromClusterId({clusterId, priorityHost = true, serviceGroup} = {}) {\n    const serviceUrls = (typeof serviceGroup === 'string') ?\n      this.serviceGroups[serviceGroup] || [] : [\n        ...this.serviceGroups.postauth,\n        ...this.serviceGroups.signin,\n        ...this.serviceGroups.preauth,\n        ...this.serviceGroups.discovery\n      ];\n\n    const identifiedServiceUrl = serviceUrls.find(\n      (serviceUrl) => serviceUrl.hosts.find(\n        (host) => host.id === clusterId\n      )\n    );\n\n    if (identifiedServiceUrl) {\n      return {\n        name: identifiedServiceUrl.name,\n        url: identifiedServiceUrl.get(priorityHost, clusterId)\n      };\n    }\n\n    return undefined;\n  },\n\n  /**\n   * Find a service based on the provided url.\n   * @param {string} url - Must be parsable by `Url`\n   * @returns {serviceUrl} - ServiceUrl assocated with provided url\n   */\n  findServiceUrlFromUrl(url) {\n    const incomingUrlObj = Url.parse(url);\n    const serviceUrls = [\n      ...this.serviceGroups.discovery,\n      ...this.serviceGroups.preauth,\n      ...this.serviceGroups.signin,\n      ...this.serviceGroups.postauth\n    ];\n\n    return serviceUrls.find(\n      (serviceUrl) => {\n        if (incomingUrlObj.hostname ===\n          Url.parse(serviceUrl.defaultUrl).hostname) {\n          return true;\n        }\n\n        if (serviceUrl.hosts.find((host) => host.host === incomingUrlObj.hostname)) {\n          return true;\n        }\n\n        return false;\n      }\n    );\n  },\n\n  /**\n   * Finds an allowed domain that matches a specific url.\n   *\n   * @param {string} url - The url to match the allowed domains against.\n   * @returns {string} - The matching allowed domain.\n   */\n  findAllowedDomain(url) {\n    const urlObj = Url.parse(url);\n\n    if (!urlObj.host) {\n      return undefined;\n    }\n\n    return this.allowedDomains.find(\n      (allowedDomain) => urlObj.host.includes(allowedDomain)\n    );\n  },\n\n  /**\n   * Get a service url from the current services list by name.\n   * @param {string} name\n   * @param {boolean} priorityHost\n   * @param {string} serviceGroup\n   * @returns {string}\n   */\n  get(name, priorityHost, serviceGroup) {\n    const serviceUrl = this._getUrl(name, serviceGroup);\n\n    return (serviceUrl) ? serviceUrl.get(priorityHost) : undefined;\n  },\n\n  /**\n   * Get the current allowed domains list.\n   *\n   * @returns {Array<string>} - the current allowed domains list.\n   */\n  getAllowedDomains() {\n    return [...this.allowedDomains];\n  },\n\n  /**\n   * Creates an object where the keys are the service names\n   * and the values are the service urls.\n   * @param {boolean} priorityHost - use the highest priority if set to `true`\n   * @param {string} [serviceGroup]\n   * @returns {Record<string, string>}\n   */\n  list(priorityHost, serviceGroup) {\n    const output = {};\n\n    const serviceUrls = (typeof serviceGroup === 'string') ?\n      this.serviceGroups[serviceGroup] || [] :\n      [\n        ...this.serviceGroups.discovery,\n        ...this.serviceGroups.preauth,\n        ...this.serviceGroups.signin,\n        ...this.serviceGroups.postauth\n      ];\n\n    if (serviceUrls) {\n      serviceUrls.forEach((serviceUrl) => {\n        output[serviceUrl.name] = serviceUrl.get(priorityHost);\n      });\n    }\n\n    return output;\n  },\n\n  /**\n   * Mark a priority host service url as failed.\n   * This will mark the host associated with the\n   * `ServiceUrl` to be removed from the its\n   * respective host array, and then return the next\n   * viable host from the `ServiceUrls` host array,\n   * or the `ServiceUrls` default url if no other priority\n   * hosts are available, or if `noPriorityHosts` is set to\n   * `true`.\n   * @param {string} url\n   * @param {boolean} noPriorityHosts\n   * @returns {string}\n   */\n  markFailedUrl(url, noPriorityHosts) {\n    const serviceUrl = this._getUrl(Object.keys(this.list()).find(\n      (key) => this._getUrl(key).removeHost(url)\n    ));\n\n    if (!serviceUrl) {\n      return undefined;\n    }\n\n    return (noPriorityHosts) ? serviceUrl.get(false) : serviceUrl.get(true);\n  },\n\n  /**\n   * Set the allowed domains for the catalog.\n   *\n   * @param {Array<string>} allowedDomains - allowed domains to be assigned.\n   * @returns {void}\n   */\n  setAllowedDomains(allowedDomains) {\n    this.allowedDomains = [...allowedDomains];\n  },\n\n  /**\n   * Update the current list of `ServiceUrl`s against a provided\n   * service hostmap.\n   * @emits ServiceCatalog#preauthorized\n   * @emits ServiceCatalog#postauthorized\n   * @param {string} serviceGroup\n   * @param {object} serviceHostmap\n   * @returns {Services}\n   */\n  updateServiceUrls(serviceGroup, serviceHostmap) {\n    const currentServiceUrls = this.serviceGroups[serviceGroup];\n\n    const unusedUrls = currentServiceUrls.filter(\n      (serviceUrl) => serviceHostmap.every(\n        (item) => item.name !== serviceUrl.name\n      )\n    );\n\n    this._unloadServiceUrls(serviceGroup, unusedUrls);\n\n    serviceHostmap.forEach((serviceObj) => {\n      const service = this._getUrl(serviceObj.name, serviceGroup);\n\n      if (service) {\n        service.defaultUrl = serviceObj.defaultUrl;\n        service.hosts = serviceObj.hosts || [];\n      }\n      else {\n        this._loadServiceUrls(serviceGroup, [new ServiceUrl({\n          ...serviceObj\n        })]);\n      }\n    });\n\n    this.status[serviceGroup].ready = true;\n    this.trigger(serviceGroup);\n\n    return this;\n  },\n\n  /**\n   * Wait until the service catalog is available,\n   * or reject after a timeout of 60 seconds.\n   * @param {string} serviceGroup\n   * @param {number} [timeout] - in seconds\n   * @returns {Promise<void>}\n   */\n  waitForCatalog(serviceGroup, timeout) {\n    return new Promise((resolve, reject) => {\n      if (this.status[serviceGroup].ready) {\n        resolve();\n      }\n\n      const timeoutTimer = setTimeout(() => reject(\n        new Error(`services: timeout occured while waiting for '${serviceGroup}' catalog to populate`)\n      ), (timeout) ? timeout * 1000 : 60000);\n\n      this.once(serviceGroup, () => {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default ServiceCatalog;\n"]}